#Q1) Write a program to find all pairs of an integer array whose sum is equal to a given number

def find(array, len, sum):
    print("Pairs whose sum is : ", sum)
    for i in range(len):
        for j in range(i, len):
            if (array[i] + array[j]) == sum:
                print(array[i], array[j])
array = [5, 2, 3, 4, 1, 6, 7]
sum = 7

# print array
print("Array= ", array)

# call function find
find(array, len(array), sum)

-----------------------------------------------------------------------------------------------------------------------------------

#Q2) Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.

arr = [1, 2, 3, 4, 5]    
print("Original array: ")   
for i in range(0, len(arr)):    
    print(arr[i], end=' ')    
print("\nArray in reverse order: ")       
for i in range(len(arr)-1, -1, -1):     
    print(arr[i], end=' ')
    
------------------------------------------------------------------------------------------------------------------------------------

#Q3) Write a program to check if two strings are a rotation of each other?

str1 = "abcde"  
str2 = "deabc"  
   
if(len(str1) != len(str2)):  
    print("Second string is not a rotation of first string") 
else:  
    try:  
        #Concatenate str1 with str1 and store it in str1  
        str1 = str1 + str1;  
          
        #Check whether str2 is present in str1  
        if(str1.index(str2)):  
            print("Second string is a rotation of first string")  
    except ValueError:  
            print("Second string is not a rotation of first string") 
            
-------------------------------------------------------------------------------------------------------------------------------------

#Q4) Write a program to print the first non-repeated character from a string?

# String
myStr = "thisisit"

while myStr != "":
    slen = len(myStr)
    ch = myStr[0]
    myStr = myStr.replace(ch, "")
    slen1 = len(myStr)
    if slen1 == slen-1:
        print ("First non-repeating character = ",ch)
        break
    else:
        print ("No Unique Character Found")
        
--------------------------------------------------------------------------------------------------------------------------------------

#Q5) Read about the Tower of Hanoi algorithm. Write a program to implement it.

def TowerOfHanoi(n, from_rod, to_rod, aux_rod):
    if n == 0:
        return
    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod)
    print("Move disk", n, "from rod", from_rod, "to rod", to_rod)
    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)
N = 3

# A, C, B are the name of rods
TowerOfHanoi(N, 'A', 'C', 'B')

--------------------------------------------------------------------------------------------------------------------------------------

#Q6) Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.

def isOperator(x):
    if x == "+":
      return True
    if x == "-":
      return True
    if x == "/":
      return True
    if x == "*":
      return True
    return False

# Convert postfix to Prefix expression

def postToPre(post_exp):
    s = []
    length = len(post_exp)
    
    for i in range(length):

      if (isOperator(post_exp[i])):
        op1 = s[-1]
        s.pop()
        op2 = s[-1]
        s.pop()
# concate the operands and operator
        temp = post_exp[i] + op2 + op1
        s.append(temp)
      else:
        s.append(post_exp[i])

    ans = ""
    for i in s:
      ans += i
    return ans


if __name__ == "__main__":
    
    post_exp = "AB+CD-"
    
    print("Prefix : ", postToPre(post_exp))

-------------------------------------------------------------------------------------------------------------------------------------------

#Q7) Write a program to convert prefix expression to infix expression.

def prefixToInfix(prefix):
    stack = []

# read prefix in reverse order
    
    i = len(prefix) - 1
    while i >= 0:
        if not isOperator(prefix[i]):
            stack.append(prefix[i])
            i -= 1
        else:
            str = "(" + stack.pop() + prefix[i] + stack.pop() + ")"
            stack.append(str)
            i -= 1

    return stack.pop()

def isOperator(c):
    if c == "*" or c == "+" or c == "-" or c == "/" or c == "^" or c == "(" or c == ")":
        return True
    else:
        return False

# Driver code
if __name__=="__main__":
  
    str = "*-A/BC-/AKL"
    print(prefixToInfix(str))

--------------------------------------------------------------------------------------------------------------------------------------

#Q8) Write a program to check if all the brackets are closed in a given code snippet.

def paraCheck( seq ):  
   while True:  
       if '()' in seq :  
           seq = seq.replace ( '()' , '' )  
       elif '{}' in seq :  
           seq = seq.replace ( '{}' , '' )  
       elif '[]' in seq :  
           seq = seq.replace ( '[]' , '' )  
       else :  
           return not seq  
  
seq = '{[()]}'  
print(f'Is {seq} valid ? : {paraCheck(seq)}')  
seq1 = '{[()]}{]{}}'  
print(f'Is {seq1} valid ? : {paraCheck (seq1)}')  

---------------------------------------------------------------------------------------------------------------------------------------

#Q9) Write a program to reverse a stack.

class Stack():
    def __init__(self):
        self.item=[]
        self.n=0
    def __len__(self):
        return self.n
    def isEmpty(self):
        return self.n==0
    def push(self,item):
        self.item.append(item)
        self.n+=1
    def pop(self):
        ele=self.item.pop()
        self.n-=1
        return ele
    def getPeek(self):
        if self.n>0:
            return self.item[-1]
        return "Stack is empty"
    def getStackitem(self):
        return [self.item[i] for i in range(self.n)]


def reversing(data):
    x=Stack()
    for i in data:
        x.push(i)
    y=Stack()
    while not x.isEmpty():
        y.push(x.pop())
    return "".join(y.getStackitem())

print(reversing("123456789")) 

-------------------------------------------------------------------------------------------------------------------------------

#Q10) Write a program to find the smallest number using a stack.

class MinStack(object):
   min=float('inf')
   def __init__(self):
      self.min=float('inf')
      self.stack = []
   def push(self, x):
      if x<=self.min:
         self.stack.append(self.min)
         self.min = x
      self.stack.append(x)
   def pop(self):
      t = self.stack[-1]
      self.stack.pop()
      if self.min == t:
         self.min = self.stack[-1]
         self.stack.pop()
   def top(self):
      return self.stack[-1]
   def getMin(self):
      return self.min
m = MinStack()
m.push(-2)
m.push(0)
m.push(-3)
print(m.getMin())
m.pop()
print(m.top())
print(m.getMin())


